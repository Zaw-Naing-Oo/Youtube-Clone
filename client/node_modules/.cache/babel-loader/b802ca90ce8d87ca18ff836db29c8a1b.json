{"ast":null,"code":"var _jsxFileName = \"/home/oscar/React/Youtube clone/client/src/components/Upload.jsx\",\n    _s = $RefreshSig$();\n\n// import React, { useState, useEffect } from 'react'\n// import styled from 'styled-components'; \n// // import { getStorage, ref as storageReff, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n// import app from '../firebase'\n// import axios from 'axios'\n// import { useNavigate } from \"react-router-dom\";\n// import { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n// const Container = styled.div`\n//   width: 100%;\n//   height: 100%;\n//   position: absolute;\n//   top: 0;\n//   left: 0;\n//   background-color: #000000a7;\n//   display: flex;\n//   align-items: center;\n//   justify-content: center;\n// `;\n// const Wrapper = styled.div`\n//   width: 600px;\n//   height: 600px;\n//   background-color: ${({ theme }) => theme.bgLighter};\n//   color: ${({ theme }) => theme.text};\n//   padding: 20px;\n//   display: flex;\n//   flex-direction: column;\n//   gap: 20px;\n//   position: relative;\n// `;\n// const Close = styled.div`\n//   position: absolute;\n//   top: 10px;\n//   right: 10px;\n//   cursor: pointer;\n// `;\n// const Title = styled.h1`\n//   text-align: center;\n// `;\n// const Input = styled.input`\n//   border: 1px solid ${({ theme }) => theme.soft};\n//   color: ${({ theme }) => theme.text};\n//   border-radius: 3px;\n//   padding: 10px;\n//   background-color: transparent;\n//   z-index: 999;\n// `;\n// const Desc = styled.textarea`\n//   border: 1px solid ${({ theme }) => theme.soft};\n//   color: ${({ theme }) => theme.text};\n//   border-radius: 3px;\n//   padding: 10px;\n//   background-color: transparent;\n// `;\n// const Button = styled.button`\n//   border-radius: 3px;\n//   border: none;\n//   padding: 10px 20px;\n//   font-weight: 500;\n//   cursor: pointer;\n//   background-color: ${({ theme }) => theme.soft};\n//   color: ${({ theme }) => theme.textSoft};\n// `;\n// const Label = styled.label`\n//   font-size: 14px;\n// `;\n// const Upload = ({ setOpen }) => {\n//     const [image, setImage] = useState(undefined)\n//     const [video, setVideo] = useState(undefined)\n//     const [imgPercentage, setImgPercentage] = useState(0)\n//     const [videoPercentage, setVideoPercentage] = useState(0)\n//     const [inputs, setInputs] = useState({});\n//     const [tags, setTags] = useState([]);\n//     const navigate = useNavigate();\n//     const handleInput = (e) => {\n//       setInputs( prev => {\n//         return {...prev, [e.target.name] : e.target.value }\n//       })\n//     };\n//   const handleTags = (e) => {\n//     setTags(e.target.value.split(\",\"));\n//   };\n//     // const uploadFile = (file, urlType) => {\n//     //   const storage = getStorage(app);\n//     //   const fileName = new Date().getTime() + file.name\n//     //   const storageRef = storageReff(storage, fileName);\n//     //   const uploadTask = uploadBytesResumable(storageRef, file);\n//     //   // Register three observers:\n//     //   // 1. 'state_changed' observer, called any time the state changes\n//     //   // 2. Error observer, called on failure\n//     //   // 3. Completion observer, called on successful completion\n//     //   uploadTask.on('state_changed', \n//     //   (snapshot) => {\n//     //     // Observe state change events such as progress, pause, and resume\n//     //     // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n//     //     const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//     //     urlType === \"imgUrl\" ? setImgPercentage(Math.round(progress)) : setVideoPercentage(Math.round(progress));\n//     //     console.log('Upload is ' + progress + '% done');\n//     //     switch (snapshot.state) {\n//     //       case 'paused':\n//     //         console.log('Upload is paused');\n//     //         break;\n//     //       case 'running':\n//     //         console.log('Upload is running');\n//     //         break;\n//     //         default:\n//     //           break;\n//     //     }\n//     //   }, \n//     //   (error) => {\n//     //     // Handle unsuccessful uploads\n//     //   }, \n//     //   () => {\n//     //     // Handle successful uploads on complete\n//     //     // For instance, get the download URL: https://firebasestorage.googleapis.com/...\n//     //     getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n//     //       setInputs((prev) => {\n//     //         return { ...prev, [urlType]: downloadURL };\n//     //       })\n//     //     });\n//     //   }\n//     // );    \n//     // };\n//     // import { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n//     const uploadFile = (file, urlType) => {\n//       const storage = getStorage();\n//       // Create the file metadata\n//       // /** @type {any} */\n//       // const metadata = {\n//       //   contentType: 'image/jpeg'\n//       // };\n//       const fileName = new Date().getTime() + file.name;\n//       // Upload file and metadata to the object 'images/mountains.jpg'\n//       const storageRef = ref(storage, fileName);\n//       const uploadTask = uploadBytesResumable(storageRef, file);\n//       // Listen for state changes, errors, and completion of the upload.\n//       uploadTask.on('state_changed',\n//         (snapshot) => {\n//           // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n//           const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//           urlType === \"imgUrl\" ? setImgPercentage(Math.round(progress)) : setVideoPercentage(Math.round(progress));\n//           // console.log('Upload is ' + progress + '% done');\n//           switch (snapshot.state) {\n//             case 'paused':\n//               console.log('Upload is paused');\n//               break;\n//             case 'running':\n//               console.log('Upload is running');\n//               break;\n//               default:\n//                 break;\n//           }\n//         }, \n//         (error) => {}, \n//         () => {\n//           // Upload completed successfully, now we can get the download URL\n//           getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n//              setInputs( (prev) => {\n//               return {...prev, [urlType] : downloadURL }\n//              })\n//           });\n//         }\n//       );\n//     }\n//     const handleUpload = async (e)=>{\n//       e.preventDefault();\n//       const res = await axios.post(\"/videos\", {...inputs, tags})\n//       setOpen(false)\n//       res.status===200 && navigate(`/video/${res.data._id}`)\n//     }\n//     useEffect(() => {\n//       image && uploadFile(image, \"imgUrl\");  \n//     }, [image])\n//     useEffect(() => {\n//       video && uploadFile(video, \"videoUrl\");  \n//     }, [video])\n//   return (\n//     <Container>\n//       <Wrapper>\n//         <Close onClick={() => setOpen(false)}>X</Close>\n//         <Title>Upload a New Video</Title>\n//         <Label>Video:</Label>\n//         { videoPercentage > 0 ? (\n//            \"uploading;\" + videoPercentage + \"%\"\n//         ) : (\n//            <Input\n//             type=\"file\"\n//             accept=\"video/*\"\n//             onChange={ (e) => setVideo(e.target.files[0])}\n//          />\n//         ) }\n//         <Input\n//           type=\"text\"\n//           placeholder=\"Title\"\n//           name=\"title\"\n//           onChange={ handleInput }\n//         />\n//         <Desc\n//           placeholder=\"Description\"\n//           name=\"description\"\n//           rows={8}\n//           onChange = { handleInput }\n//         />\n//         <Input\n//           type=\"text\"\n//           placeholder=\"Separate the tags with commas.\"\n//           onChange={ handleTags}\n//         />\n//         <Label>Image:</Label>\n//         { imgPercentage > 0 ? (\n//           \"uploading\" + imgPercentage + \"%\"\n//         ) : (\n//           <Input\n//             type=\"file\"\n//             accept=\"image/*\"\n//             onChange={(e) => setImage(e.target.files[0])}\n//           />\n//         )}\n//         <Button onClick={handleUpload}>Upload</Button>\n//       </Wrapper>\n//     </Container>\n//   )\n// }\n// export default Upload\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { getStorage, ref as storrageRef, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport app from \"../firebase\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  background-color: #000000a7;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n_c = Container;\nconst Wrapper = styled.div`\n  width: 600px;\n  height: 600px;\n  background-color: ${_ref => {\n  let {\n    theme\n  } = _ref;\n  return theme.bgLighter;\n}};\n  color: ${_ref2 => {\n  let {\n    theme\n  } = _ref2;\n  return theme.text;\n}};\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  position: relative;\n`;\n_c2 = Wrapper;\nconst Close = styled.div`\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  cursor: pointer;\n`;\n_c3 = Close;\nconst Title = styled.h1`\n  text-align: center;\n`;\n_c4 = Title;\nconst Input = styled.input`\n  border: 1px solid ${_ref3 => {\n  let {\n    theme\n  } = _ref3;\n  return theme.soft;\n}};\n  color: ${_ref4 => {\n  let {\n    theme\n  } = _ref4;\n  return theme.text;\n}};\n  border-radius: 3px;\n  padding: 10px;\n  background-color: transparent;\n  z-index: 999;\n`;\n_c5 = Input;\nconst Desc = styled.textarea`\n  border: 1px solid ${_ref5 => {\n  let {\n    theme\n  } = _ref5;\n  return theme.soft;\n}};\n  color: ${_ref6 => {\n  let {\n    theme\n  } = _ref6;\n  return theme.text;\n}};\n  border-radius: 3px;\n  padding: 10px;\n  background-color: transparent;\n`;\n_c6 = Desc;\nconst Button = styled.button`\n  border-radius: 3px;\n  border: none;\n  padding: 10px 20px;\n  font-weight: 500;\n  cursor: pointer;\n  background-color: ${_ref7 => {\n  let {\n    theme\n  } = _ref7;\n  return theme.soft;\n}};\n  color: ${_ref8 => {\n  let {\n    theme\n  } = _ref8;\n  return theme.textSoft;\n}};\n`;\n_c7 = Button;\nconst Label = styled.label`\n  font-size: 14px;\n`;\n_c8 = Label;\n\nconst Upload = _ref9 => {\n  _s();\n\n  let {\n    setOpen\n  } = _ref9;\n  const [img, setImg] = useState(undefined);\n  const [video, setVideo] = useState(undefined);\n  const [imgPerc, setImgPerc] = useState(0);\n  const [videoPerc, setVideoPerc] = useState(0);\n  const [inputs, setInputs] = useState({});\n  const [tags, setTags] = useState([]);\n  const navigate = useNavigate();\n\n  const handleChange = e => {\n    setInputs(prev => {\n      return { ...prev,\n        [e.target.name]: e.target.value\n      };\n    });\n  };\n\n  const handleTags = e => {\n    setTags(e.target.value.split(\",\"));\n  };\n\n  const uploadFile = (file, urlType) => {\n    const storage = getStorage(app);\n    const fileName = new Date().getTime() + file.name;\n    const storageRef = storrageRef(storage, fileName);\n    const uploadTask = uploadBytesResumable(storageRef, file);\n    uploadTask.on(\"state_changed\", snapshot => {\n      const progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n      urlType === \"imgUrl\" ? setImgPerc(Math.round(progress)) : setVideoPerc(Math.round(progress));\n\n      switch (snapshot.state) {\n        case \"paused\":\n          console.log(\"Upload is paused\");\n          break;\n\n        case \"running\":\n          console.log(\"Upload is running\");\n          break;\n\n        default:\n          break;\n      }\n    }, error => {}, () => {\n      getDownloadURL(uploadTask.snapshot.ref).then(downloadURL => {\n        setInputs(prev => {\n          return { ...prev,\n            [urlType]: downloadURL\n          };\n        });\n      });\n    });\n  };\n\n  useEffect(() => {\n    video ? uploadFile(video, \"videoUrl\") : \"Error\";\n  }, [video]);\n  useEffect(() => {\n    img && uploadFile(img, \"imgUrl\");\n  }, [img]);\n\n  const handleUpload = async e => {\n    e.preventDefault();\n    const res = await axios.post(\"/videos\", { ...inputs,\n      tags\n    });\n    setOpen(false);\n    res.status === 200 && navigate(`/video/${res.data._id}`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Wrapper, {\n      children: [/*#__PURE__*/_jsxDEV(Close, {\n        onClick: () => setOpen(false),\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Title, {\n        children: \"Upload a New Video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Label, {\n        children: \"Video:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 9\n      }, this), videoPerc > 0 ? \"Uploading:\" + videoPerc : /*#__PURE__*/_jsxDEV(Input, {\n        type: \"file\",\n        accept: \"video/*\",\n        onChange: e => setVideo(e.target.files[0])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        type: \"text\",\n        placeholder: \"Title\",\n        name: \"title\",\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Desc, {\n        placeholder: \"Description\",\n        name: \"desc\",\n        rows: 8,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        type: \"text\",\n        placeholder: \"Separate the tags with commas.\",\n        onChance: handleTags\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Label, {\n        children: \"Image:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 9\n      }, this), imgPerc > 0 ? \"Uploading:\" + imgPerc + \"%\" : /*#__PURE__*/_jsxDEV(Input, {\n        type: \"file\",\n        accept: \"image/*\",\n        onChange: e => setImg(e.target.files[0])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleUpload,\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 428,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Upload, \"bGMEdK9kwAlfVZ9tA1cwDVXMQdg=\", false, function () {\n  return [useNavigate];\n});\n\n_c9 = Upload;\nexport default Upload;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Wrapper\");\n$RefreshReg$(_c3, \"Close\");\n$RefreshReg$(_c4, \"Title\");\n$RefreshReg$(_c5, \"Input\");\n$RefreshReg$(_c6, \"Desc\");\n$RefreshReg$(_c7, \"Button\");\n$RefreshReg$(_c8, \"Label\");\n$RefreshReg$(_c9, \"Upload\");","map":{"version":3,"names":["React","useEffect","useState","styled","getStorage","ref","storrageRef","uploadBytesResumable","getDownloadURL","app","axios","useNavigate","Container","div","Wrapper","theme","bgLighter","text","Close","Title","h1","Input","input","soft","Desc","textarea","Button","button","textSoft","Label","label","Upload","setOpen","img","setImg","undefined","video","setVideo","imgPerc","setImgPerc","videoPerc","setVideoPerc","inputs","setInputs","tags","setTags","navigate","handleChange","e","prev","target","name","value","handleTags","split","uploadFile","file","urlType","storage","fileName","Date","getTime","storageRef","uploadTask","on","snapshot","progress","bytesTransferred","totalBytes","Math","round","state","console","log","error","then","downloadURL","handleUpload","preventDefault","res","post","status","data","_id","files"],"sources":["/home/oscar/React/Youtube clone/client/src/components/Upload.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react'\n// import styled from 'styled-components'; \n// // import { getStorage, ref as storageReff, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n// import app from '../firebase'\n// import axios from 'axios'\n// import { useNavigate } from \"react-router-dom\";\n// import { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n\n\n// const Container = styled.div`\n//   width: 100%;\n//   height: 100%;\n//   position: absolute;\n//   top: 0;\n//   left: 0;\n//   background-color: #000000a7;\n//   display: flex;\n//   align-items: center;\n//   justify-content: center;\n// `;\n\n// const Wrapper = styled.div`\n//   width: 600px;\n//   height: 600px;\n//   background-color: ${({ theme }) => theme.bgLighter};\n//   color: ${({ theme }) => theme.text};\n//   padding: 20px;\n//   display: flex;\n//   flex-direction: column;\n//   gap: 20px;\n//   position: relative;\n// `;\n// const Close = styled.div`\n//   position: absolute;\n//   top: 10px;\n//   right: 10px;\n//   cursor: pointer;\n// `;\n// const Title = styled.h1`\n//   text-align: center;\n// `;\n\n// const Input = styled.input`\n//   border: 1px solid ${({ theme }) => theme.soft};\n//   color: ${({ theme }) => theme.text};\n//   border-radius: 3px;\n//   padding: 10px;\n//   background-color: transparent;\n//   z-index: 999;\n// `;\n// const Desc = styled.textarea`\n//   border: 1px solid ${({ theme }) => theme.soft};\n//   color: ${({ theme }) => theme.text};\n//   border-radius: 3px;\n//   padding: 10px;\n//   background-color: transparent;\n// `;\n// const Button = styled.button`\n//   border-radius: 3px;\n//   border: none;\n//   padding: 10px 20px;\n//   font-weight: 500;\n//   cursor: pointer;\n//   background-color: ${({ theme }) => theme.soft};\n//   color: ${({ theme }) => theme.textSoft};\n// `;\n// const Label = styled.label`\n//   font-size: 14px;\n// `;\n\n// const Upload = ({ setOpen }) => {\n\n//     const [image, setImage] = useState(undefined)\n//     const [video, setVideo] = useState(undefined)\n//     const [imgPercentage, setImgPercentage] = useState(0)\n//     const [videoPercentage, setVideoPercentage] = useState(0)\n//     const [inputs, setInputs] = useState({});\n//     const [tags, setTags] = useState([]);\n\n//     const navigate = useNavigate();\n\n//     const handleInput = (e) => {\n//       setInputs( prev => {\n//         return {...prev, [e.target.name] : e.target.value }\n//       })\n//     };\n\n    \n//   const handleTags = (e) => {\n//     setTags(e.target.value.split(\",\"));\n//   };\n\n//     // const uploadFile = (file, urlType) => {\n//     //   const storage = getStorage(app);\n//     //   const fileName = new Date().getTime() + file.name\n//     //   const storageRef = storageReff(storage, fileName);\n//     //   const uploadTask = uploadBytesResumable(storageRef, file);\n\n\n//     //   // Register three observers:\n//     //   // 1. 'state_changed' observer, called any time the state changes\n//     //   // 2. Error observer, called on failure\n//     //   // 3. Completion observer, called on successful completion\n//     //   uploadTask.on('state_changed', \n//     //   (snapshot) => {\n//     //     // Observe state change events such as progress, pause, and resume\n//     //     // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n//     //     const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//     //     urlType === \"imgUrl\" ? setImgPercentage(Math.round(progress)) : setVideoPercentage(Math.round(progress));\n//     //     console.log('Upload is ' + progress + '% done');\n//     //     switch (snapshot.state) {\n//     //       case 'paused':\n//     //         console.log('Upload is paused');\n//     //         break;\n//     //       case 'running':\n//     //         console.log('Upload is running');\n//     //         break;\n//     //         default:\n//     //           break;\n//     //     }\n//     //   }, \n//     //   (error) => {\n//     //     // Handle unsuccessful uploads\n//     //   }, \n//     //   () => {\n//     //     // Handle successful uploads on complete\n//     //     // For instance, get the download URL: https://firebasestorage.googleapis.com/...\n//     //     getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n//     //       setInputs((prev) => {\n//     //         return { ...prev, [urlType]: downloadURL };\n//     //       })\n//     //     });\n//     //   }\n//     // );    \n//     // };\n\n\n\n\n\n   \n\n//     // import { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n \n//     const uploadFile = (file, urlType) => {\n\n\n//       const storage = getStorage();\n    \n//       // Create the file metadata\n//       // /** @type {any} */\n//       // const metadata = {\n//       //   contentType: 'image/jpeg'\n//       // };\n\n//       const fileName = new Date().getTime() + file.name;\n      \n//       // Upload file and metadata to the object 'images/mountains.jpg'\n//       const storageRef = ref(storage, fileName);\n//       const uploadTask = uploadBytesResumable(storageRef, file);\n      \n//       // Listen for state changes, errors, and completion of the upload.\n//       uploadTask.on('state_changed',\n//         (snapshot) => {\n//           // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n//           const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//           urlType === \"imgUrl\" ? setImgPercentage(Math.round(progress)) : setVideoPercentage(Math.round(progress));\n//           // console.log('Upload is ' + progress + '% done');\n//           switch (snapshot.state) {\n//             case 'paused':\n//               console.log('Upload is paused');\n//               break;\n//             case 'running':\n//               console.log('Upload is running');\n//               break;\n//               default:\n//                 break;\n//           }\n//         }, \n//         (error) => {}, \n//         () => {\n//           // Upload completed successfully, now we can get the download URL\n//           getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n//              setInputs( (prev) => {\n//               return {...prev, [urlType] : downloadURL }\n//              })\n//           });\n//         }\n//       );\n//     }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//     const handleUpload = async (e)=>{\n//       e.preventDefault();\n//       const res = await axios.post(\"/videos\", {...inputs, tags})\n//       setOpen(false)\n//       res.status===200 && navigate(`/video/${res.data._id}`)\n//     }\n\n//     useEffect(() => {\n//       image && uploadFile(image, \"imgUrl\");  \n//     }, [image])\n\n//     useEffect(() => {\n//       video && uploadFile(video, \"videoUrl\");  \n//     }, [video])\n    \n\n//   return (\n//     <Container>\n//       <Wrapper>\n//         <Close onClick={() => setOpen(false)}>X</Close>\n//         <Title>Upload a New Video</Title>\n//         <Label>Video:</Label>\n//         { videoPercentage > 0 ? (\n//            \"uploading;\" + videoPercentage + \"%\"\n//         ) : (\n//            <Input\n//             type=\"file\"\n//             accept=\"video/*\"\n//             onChange={ (e) => setVideo(e.target.files[0])}\n//          />\n//         ) }\n//         <Input\n//           type=\"text\"\n//           placeholder=\"Title\"\n//           name=\"title\"\n//           onChange={ handleInput }\n//         />\n//         <Desc\n//           placeholder=\"Description\"\n//           name=\"description\"\n//           rows={8}\n//           onChange = { handleInput }\n//         />\n//         <Input\n//           type=\"text\"\n//           placeholder=\"Separate the tags with commas.\"\n//           onChange={ handleTags}\n//         />\n//         <Label>Image:</Label>\n//         { imgPercentage > 0 ? (\n//           \"uploading\" + imgPercentage + \"%\"\n//         ) : (\n//           <Input\n//             type=\"file\"\n//             accept=\"image/*\"\n//             onChange={(e) => setImage(e.target.files[0])}\n//           />\n//         )}\n//         <Button onClick={handleUpload}>Upload</Button>\n//       </Wrapper>\n//     </Container>\n//   )\n// }\n\n// export default Upload\n\n\n\n\n\n\n\n\n\n\n\n\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport {\n  getStorage,\n  ref as storrageRef,\n  uploadBytesResumable,\n  getDownloadURL,\n} from \"firebase/storage\";\nimport app from \"../firebase\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\n\n\nconst Container = styled.div`\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  background-color: #000000a7;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Wrapper = styled.div`\n  width: 600px;\n  height: 600px;\n  background-color: ${({ theme }) => theme.bgLighter};\n  color: ${({ theme }) => theme.text};\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  position: relative;\n`;\nconst Close = styled.div`\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  cursor: pointer;\n`;\nconst Title = styled.h1`\n  text-align: center;\n`;\n\nconst Input = styled.input`\n  border: 1px solid ${({ theme }) => theme.soft};\n  color: ${({ theme }) => theme.text};\n  border-radius: 3px;\n  padding: 10px;\n  background-color: transparent;\n  z-index: 999;\n`;\nconst Desc = styled.textarea`\n  border: 1px solid ${({ theme }) => theme.soft};\n  color: ${({ theme }) => theme.text};\n  border-radius: 3px;\n  padding: 10px;\n  background-color: transparent;\n`;\nconst Button = styled.button`\n  border-radius: 3px;\n  border: none;\n  padding: 10px 20px;\n  font-weight: 500;\n  cursor: pointer;\n  background-color: ${({ theme }) => theme.soft};\n  color: ${({ theme }) => theme.textSoft};\n`;\nconst Label = styled.label`\n  font-size: 14px;\n`;\nconst Upload = ({ setOpen }) => {\n  const [img, setImg] = useState(undefined);\n  const [video, setVideo] = useState(undefined);\n  const [imgPerc, setImgPerc] = useState(0);\n  const [videoPerc, setVideoPerc] = useState(0);\n  const [inputs, setInputs] = useState({});\n  const [tags, setTags] = useState([]);\n\n  const navigate = useNavigate()\n\n  const handleChange = (e) => {\n    setInputs((prev) => {\n      return { ...prev, [e.target.name]: e.target.value };\n    });\n  };\n\n  const handleTags = (e) => {\n    setTags(e.target.value.split(\",\"));\n  };\n\n  const uploadFile = (file, urlType) => {\n    const storage = getStorage(app);\n    const fileName = new Date().getTime() + file.name;\n    const storageRef = storrageRef(storage, fileName);\n    const uploadTask = uploadBytesResumable(storageRef, file);\n\n    uploadTask.on(\n      \"state_changed\",\n      (snapshot) => {\n        const progress =\n          (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        urlType === \"imgUrl\" ? setImgPerc(Math.round(progress)) : setVideoPerc(Math.round(progress));\n        switch (snapshot.state) {\n          case \"paused\":\n            console.log(\"Upload is paused\");\n            break;\n          case \"running\":\n            console.log(\"Upload is running\");\n            break;\n          default:\n            break;\n        }\n      },\n      (error) => {},\n      () => {\n        getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n          setInputs((prev) => {\n            return { ...prev, [urlType]: downloadURL };\n          });\n        });\n      }\n    );\n  };\n\n  useEffect(() => {\n    video ? uploadFile(video , \"videoUrl\") : \"Error\"\n  }, [video]);\n\n  useEffect(() => {\n    img && uploadFile(img, \"imgUrl\");\n  }, [img]);\n\n  const handleUpload = async (e)=>{\n    e.preventDefault();\n    const res = await axios.post(\"/videos\", {...inputs, tags})\n    setOpen(false)\n    res.status===200 && navigate(`/video/${res.data._id}`)\n  }\n\n  return (\n    <Container>\n      <Wrapper>\n        <Close onClick={() => setOpen(false)}>X</Close>\n        <Title>Upload a New Video</Title>\n        <Label>Video:</Label>\n        {videoPerc > 0 ? (\n          \"Uploading:\" + videoPerc\n        ) : (\n          <Input\n            type=\"file\"\n            accept=\"video/*\"\n            onChange={(e) => setVideo(e.target.files[0])}\n          />\n        )}\n        <Input\n          type=\"text\"\n          placeholder=\"Title\"\n          name=\"title\"\n          onChange={handleChange}\n        />\n        <Desc\n          placeholder=\"Description\"\n          name=\"desc\"\n          rows={8}\n          onChange={handleChange}\n        />\n        <Input\n          type=\"text\"\n          placeholder=\"Separate the tags with commas.\"\n          onChance={handleTags}\n        />\n        <Label>Image:</Label>\n        {imgPerc > 0 ? (\n          \"Uploading:\" + imgPerc + \"%\"\n        ) : (\n          <Input\n            type=\"file\"\n            accept=\"image/*\"\n            onChange={(e) => setImg(e.target.files[0])}\n          />\n        )}\n        <Button onClick={handleUpload}>Upload</Button>\n      </Wrapper>\n    </Container>\n  );\n};\n\nexport default Upload;"],"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"},"metadata":{},"sourceType":"module"}