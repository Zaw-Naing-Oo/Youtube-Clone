{"ast":null,"code":"// import React, { useState, useEffect } from 'react'\n// import styled from 'styled-components'; \n// // import { getStorage, ref as storageReff, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n// import app from '../firebase'\n// import axios from 'axios'\n// import { useNavigate } from \"react-router-dom\";\n// import { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n// const Container = styled.div`\n//   width: 100%;\n//   height: 100%;\n//   position: absolute;\n//   top: 0;\n//   left: 0;\n//   background-color: #000000a7;\n//   display: flex;\n//   align-items: center;\n//   justify-content: center;\n// `;\n// const Wrapper = styled.div`\n//   width: 600px;\n//   height: 600px;\n//   background-color: ${({ theme }) => theme.bgLighter};\n//   color: ${({ theme }) => theme.text};\n//   padding: 20px;\n//   display: flex;\n//   flex-direction: column;\n//   gap: 20px;\n//   position: relative;\n// `;\n// const Close = styled.div`\n//   position: absolute;\n//   top: 10px;\n//   right: 10px;\n//   cursor: pointer;\n// `;\n// const Title = styled.h1`\n//   text-align: center;\n// `;\n// const Input = styled.input`\n//   border: 1px solid ${({ theme }) => theme.soft};\n//   color: ${({ theme }) => theme.text};\n//   border-radius: 3px;\n//   padding: 10px;\n//   background-color: transparent;\n//   z-index: 999;\n// `;\n// const Desc = styled.textarea`\n//   border: 1px solid ${({ theme }) => theme.soft};\n//   color: ${({ theme }) => theme.text};\n//   border-radius: 3px;\n//   padding: 10px;\n//   background-color: transparent;\n// `;\n// const Button = styled.button`\n//   border-radius: 3px;\n//   border: none;\n//   padding: 10px 20px;\n//   font-weight: 500;\n//   cursor: pointer;\n//   background-color: ${({ theme }) => theme.soft};\n//   color: ${({ theme }) => theme.textSoft};\n// `;\n// const Label = styled.label`\n//   font-size: 14px;\n// `;\n// const Upload = ({ setOpen }) => {\n//     const [image, setImage] = useState(undefined)\n//     const [video, setVideo] = useState(undefined)\n//     const [imgPercentage, setImgPercentage] = useState(0)\n//     const [videoPercentage, setVideoPercentage] = useState(0)\n//     const [inputs, setInputs] = useState({});\n//     const [tags, setTags] = useState([]);\n//     const navigate = useNavigate();\n//     const handleInput = (e) => {\n//       setInputs( prev => {\n//         return {...prev, [e.target.name] : e.target.value }\n//       })\n//     };\n//   const handleTags = (e) => {\n//     setTags(e.target.value.split(\",\"));\n//   };\n//     // const uploadFile = (file, urlType) => {\n//     //   const storage = getStorage(app);\n//     //   const fileName = new Date().getTime() + file.name\n//     //   const storageRef = storageReff(storage, fileName);\n//     //   const uploadTask = uploadBytesResumable(storageRef, file);\n//     //   // Register three observers:\n//     //   // 1. 'state_changed' observer, called any time the state changes\n//     //   // 2. Error observer, called on failure\n//     //   // 3. Completion observer, called on successful completion\n//     //   uploadTask.on('state_changed', \n//     //   (snapshot) => {\n//     //     // Observe state change events such as progress, pause, and resume\n//     //     // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n//     //     const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//     //     urlType === \"imgUrl\" ? setImgPercentage(Math.round(progress)) : setVideoPercentage(Math.round(progress));\n//     //     console.log('Upload is ' + progress + '% done');\n//     //     switch (snapshot.state) {\n//     //       case 'paused':\n//     //         console.log('Upload is paused');\n//     //         break;\n//     //       case 'running':\n//     //         console.log('Upload is running');\n//     //         break;\n//     //         default:\n//     //           break;\n//     //     }\n//     //   }, \n//     //   (error) => {\n//     //     // Handle unsuccessful uploads\n//     //   }, \n//     //   () => {\n//     //     // Handle successful uploads on complete\n//     //     // For instance, get the download URL: https://firebasestorage.googleapis.com/...\n//     //     getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n//     //       setInputs((prev) => {\n//     //         return { ...prev, [urlType]: downloadURL };\n//     //       })\n//     //     });\n//     //   }\n//     // );    \n//     // };\n//     // import { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n//     const uploadFile = (file, urlType) => {\n//       const storage = getStorage();\n//       // Create the file metadata\n//       // /** @type {any} */\n//       // const metadata = {\n//       //   contentType: 'image/jpeg'\n//       // };\n//       const fileName = new Date().getTime() + file.name;\n//       // Upload file and metadata to the object 'images/mountains.jpg'\n//       const storageRef = ref(storage, fileName);\n//       const uploadTask = uploadBytesResumable(storageRef, file);\n//       // Listen for state changes, errors, and completion of the upload.\n//       uploadTask.on('state_changed',\n//         (snapshot) => {\n//           // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n//           const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//           urlType === \"imgUrl\" ? setImgPercentage(Math.round(progress)) : setVideoPercentage(Math.round(progress));\n//           // console.log('Upload is ' + progress + '% done');\n//           switch (snapshot.state) {\n//             case 'paused':\n//               console.log('Upload is paused');\n//               break;\n//             case 'running':\n//               console.log('Upload is running');\n//               break;\n//               default:\n//                 break;\n//           }\n//         }, \n//         (error) => {}, \n//         () => {\n//           // Upload completed successfully, now we can get the download URL\n//           getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n//              setInputs( (prev) => {\n//               return {...prev, [urlType] : downloadURL }\n//              })\n//           });\n//         }\n//       );\n//     }\n//     const handleUpload = async (e)=>{\n//       e.preventDefault();\n//       const res = await axios.post(\"/videos\", {...inputs, tags})\n//       setOpen(false)\n//       res.status===200 && navigate(`/video/${res.data._id}`)\n//     }\n//     useEffect(() => {\n//       image && uploadFile(image, \"imgUrl\");  \n//     }, [image])\n//     useEffect(() => {\n//       video && uploadFile(video, \"videoUrl\");  \n//     }, [video])\n//   return (\n//     <Container>\n//       <Wrapper>\n//         <Close onClick={() => setOpen(false)}>X</Close>\n//         <Title>Upload a New Video</Title>\n//         <Label>Video:</Label>\n//         { videoPercentage > 0 ? (\n//            \"uploading;\" + videoPercentage + \"%\"\n//         ) : (\n//            <Input\n//             type=\"file\"\n//             accept=\"video/*\"\n//             onChange={ (e) => setVideo(e.target.files[0])}\n//          />\n//         ) }\n//         <Input\n//           type=\"text\"\n//           placeholder=\"Title\"\n//           name=\"title\"\n//           onChange={ handleInput }\n//         />\n//         <Desc\n//           placeholder=\"Description\"\n//           name=\"description\"\n//           rows={8}\n//           onChange = { handleInput }\n//         />\n//         <Input\n//           type=\"text\"\n//           placeholder=\"Separate the tags with commas.\"\n//           onChange={ handleTags}\n//         />\n//         <Label>Image:</Label>\n//         { imgPercentage > 0 ? (\n//           \"uploading\" + imgPercentage + \"%\"\n//         ) : (\n//           <Input\n//             type=\"file\"\n//             accept=\"image/*\"\n//             onChange={(e) => setImage(e.target.files[0])}\n//           />\n//         )}\n//         <Button onClick={handleUpload}>Upload</Button>\n//       </Wrapper>\n//     </Container>\n//   )\n// }\n// export default Upload","map":{"version":3,"names":[],"sources":["/home/oscar/React/Youtube clone/client/src/components/Upload.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react'\n// import styled from 'styled-components'; \n// // import { getStorage, ref as storageReff, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n// import app from '../firebase'\n// import axios from 'axios'\n// import { useNavigate } from \"react-router-dom\";\n// import { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n\n\n// const Container = styled.div`\n//   width: 100%;\n//   height: 100%;\n//   position: absolute;\n//   top: 0;\n//   left: 0;\n//   background-color: #000000a7;\n//   display: flex;\n//   align-items: center;\n//   justify-content: center;\n// `;\n\n// const Wrapper = styled.div`\n//   width: 600px;\n//   height: 600px;\n//   background-color: ${({ theme }) => theme.bgLighter};\n//   color: ${({ theme }) => theme.text};\n//   padding: 20px;\n//   display: flex;\n//   flex-direction: column;\n//   gap: 20px;\n//   position: relative;\n// `;\n// const Close = styled.div`\n//   position: absolute;\n//   top: 10px;\n//   right: 10px;\n//   cursor: pointer;\n// `;\n// const Title = styled.h1`\n//   text-align: center;\n// `;\n\n// const Input = styled.input`\n//   border: 1px solid ${({ theme }) => theme.soft};\n//   color: ${({ theme }) => theme.text};\n//   border-radius: 3px;\n//   padding: 10px;\n//   background-color: transparent;\n//   z-index: 999;\n// `;\n// const Desc = styled.textarea`\n//   border: 1px solid ${({ theme }) => theme.soft};\n//   color: ${({ theme }) => theme.text};\n//   border-radius: 3px;\n//   padding: 10px;\n//   background-color: transparent;\n// `;\n// const Button = styled.button`\n//   border-radius: 3px;\n//   border: none;\n//   padding: 10px 20px;\n//   font-weight: 500;\n//   cursor: pointer;\n//   background-color: ${({ theme }) => theme.soft};\n//   color: ${({ theme }) => theme.textSoft};\n// `;\n// const Label = styled.label`\n//   font-size: 14px;\n// `;\n\n// const Upload = ({ setOpen }) => {\n\n//     const [image, setImage] = useState(undefined)\n//     const [video, setVideo] = useState(undefined)\n//     const [imgPercentage, setImgPercentage] = useState(0)\n//     const [videoPercentage, setVideoPercentage] = useState(0)\n//     const [inputs, setInputs] = useState({});\n//     const [tags, setTags] = useState([]);\n\n//     const navigate = useNavigate();\n\n//     const handleInput = (e) => {\n//       setInputs( prev => {\n//         return {...prev, [e.target.name] : e.target.value }\n//       })\n//     };\n\n    \n//   const handleTags = (e) => {\n//     setTags(e.target.value.split(\",\"));\n//   };\n\n//     // const uploadFile = (file, urlType) => {\n//     //   const storage = getStorage(app);\n//     //   const fileName = new Date().getTime() + file.name\n//     //   const storageRef = storageReff(storage, fileName);\n//     //   const uploadTask = uploadBytesResumable(storageRef, file);\n\n\n//     //   // Register three observers:\n//     //   // 1. 'state_changed' observer, called any time the state changes\n//     //   // 2. Error observer, called on failure\n//     //   // 3. Completion observer, called on successful completion\n//     //   uploadTask.on('state_changed', \n//     //   (snapshot) => {\n//     //     // Observe state change events such as progress, pause, and resume\n//     //     // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n//     //     const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//     //     urlType === \"imgUrl\" ? setImgPercentage(Math.round(progress)) : setVideoPercentage(Math.round(progress));\n//     //     console.log('Upload is ' + progress + '% done');\n//     //     switch (snapshot.state) {\n//     //       case 'paused':\n//     //         console.log('Upload is paused');\n//     //         break;\n//     //       case 'running':\n//     //         console.log('Upload is running');\n//     //         break;\n//     //         default:\n//     //           break;\n//     //     }\n//     //   }, \n//     //   (error) => {\n//     //     // Handle unsuccessful uploads\n//     //   }, \n//     //   () => {\n//     //     // Handle successful uploads on complete\n//     //     // For instance, get the download URL: https://firebasestorage.googleapis.com/...\n//     //     getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n//     //       setInputs((prev) => {\n//     //         return { ...prev, [urlType]: downloadURL };\n//     //       })\n//     //     });\n//     //   }\n//     // );    \n//     // };\n\n\n\n\n\n   \n\n//     // import { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n \n//     const uploadFile = (file, urlType) => {\n\n\n//       const storage = getStorage();\n    \n//       // Create the file metadata\n//       // /** @type {any} */\n//       // const metadata = {\n//       //   contentType: 'image/jpeg'\n//       // };\n\n//       const fileName = new Date().getTime() + file.name;\n      \n//       // Upload file and metadata to the object 'images/mountains.jpg'\n//       const storageRef = ref(storage, fileName);\n//       const uploadTask = uploadBytesResumable(storageRef, file);\n      \n//       // Listen for state changes, errors, and completion of the upload.\n//       uploadTask.on('state_changed',\n//         (snapshot) => {\n//           // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n//           const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//           urlType === \"imgUrl\" ? setImgPercentage(Math.round(progress)) : setVideoPercentage(Math.round(progress));\n//           // console.log('Upload is ' + progress + '% done');\n//           switch (snapshot.state) {\n//             case 'paused':\n//               console.log('Upload is paused');\n//               break;\n//             case 'running':\n//               console.log('Upload is running');\n//               break;\n//               default:\n//                 break;\n//           }\n//         }, \n//         (error) => {}, \n//         () => {\n//           // Upload completed successfully, now we can get the download URL\n//           getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n//              setInputs( (prev) => {\n//               return {...prev, [urlType] : downloadURL }\n//              })\n//           });\n//         }\n//       );\n//     }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//     const handleUpload = async (e)=>{\n//       e.preventDefault();\n//       const res = await axios.post(\"/videos\", {...inputs, tags})\n//       setOpen(false)\n//       res.status===200 && navigate(`/video/${res.data._id}`)\n//     }\n\n//     useEffect(() => {\n//       image && uploadFile(image, \"imgUrl\");  \n//     }, [image])\n\n//     useEffect(() => {\n//       video && uploadFile(video, \"videoUrl\");  \n//     }, [video])\n    \n\n//   return (\n//     <Container>\n//       <Wrapper>\n//         <Close onClick={() => setOpen(false)}>X</Close>\n//         <Title>Upload a New Video</Title>\n//         <Label>Video:</Label>\n//         { videoPercentage > 0 ? (\n//            \"uploading;\" + videoPercentage + \"%\"\n//         ) : (\n//            <Input\n//             type=\"file\"\n//             accept=\"video/*\"\n//             onChange={ (e) => setVideo(e.target.files[0])}\n//          />\n//         ) }\n//         <Input\n//           type=\"text\"\n//           placeholder=\"Title\"\n//           name=\"title\"\n//           onChange={ handleInput }\n//         />\n//         <Desc\n//           placeholder=\"Description\"\n//           name=\"description\"\n//           rows={8}\n//           onChange = { handleInput }\n//         />\n//         <Input\n//           type=\"text\"\n//           placeholder=\"Separate the tags with commas.\"\n//           onChange={ handleTags}\n//         />\n//         <Label>Image:</Label>\n//         { imgPercentage > 0 ? (\n//           \"uploading\" + imgPercentage + \"%\"\n//         ) : (\n//           <Input\n//             type=\"file\"\n//             accept=\"image/*\"\n//             onChange={(e) => setImage(e.target.files[0])}\n//           />\n//         )}\n//         <Button onClick={handleUpload}>Upload</Button>\n//       </Wrapper>\n//     </Container>\n//   )\n// }\n\n// export default Upload"],"mappingskBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA"},"metadata":{},"sourceType":"module"}